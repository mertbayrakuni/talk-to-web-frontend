"""
Django setting for a core project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import mimetypes
import os
from datetime import timedelta
from pathlib import Path
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _
from dotenv import load_dotenv

load_dotenv()

sentry_sdk.init(
    dsn=os.getenv("SENTRY_KEY"),
    integrations=[
        DjangoIntegration(),
    ],

    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    # We recommend adjusting this value in production.
    traces_sample_rate=1.0,

    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True
)
DJANGO_ENCRYPTED_FIELD_KEY = os.getenv("DJANGO_SECRET_KEY")
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")
APPEND_SLASH = os.getenv("APPEND_SLASH") in [True, "True", "true"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG") in [True, "True", "true"]

mimetypes.add_type("text/css", ".css")

ALLOWED_HOSTS = ['*']
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)


BASE_DIR = Path(__file__).resolve().parent.parent
os.environ['BASE_DIR'] = str(BASE_DIR)

FILE_UPLOAD_MAX_MEMORY_SIZE = 200000000
DATA_UPLOAD_MAX_MEMORY_SIZE = 200000000
MAX_UPLOAD_SIZE = "104857600"
CONTENT_TYPES = ['image', 'video']
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1024000

INSTALLED_APPS = [
    "admin_interface",
    "colorfield",
    "whitenoise.runserver_nostatic",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'django_ckeditor_5',
    'frontend.apps.FrontendConfig',
    'corsheaders'
]

X_FRAME_OPTIONS = "SAMEORIGIN"
SILENCED_SYSTEM_CHECKS = ["security.W019"]

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': os.getenv("CELERY_BROKER_URL"),
    },
}

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        "LOCATION": os.environ.get("CELERY_BROKER_URL"),
    }
}


def force_download_pdfs(headers, path, url):
    if path.endswith('.pdf'):
        headers['Content-Disposition'] = 'attachment'

USE_THOUSAND_SEPARATOR=True
WHITENOISE_ADD_HEADERS_FUNCTION = force_download_pdfs

handler404 = 'frontend.views.handler404'
handler500 = 'frontend.views.handler500'
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_WHITELIST = [
    "https://talktoweb.com",
    "https://panel.talktoweb.com",
    "https://frontend.talktoweb.com",
    "http://localhost:8000",
    "http://127.0.0.1:8000"
]
CORS_ALLOWED_ORIGINS = [
    "https://talktoweb.com",
    "https://panel.talktoweb.com",
    "https://frontend.talktoweb.com",
    "http://localhost:8000",
    "http://127.0.0.1:8000"
]
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]
CSRF_TRUSTED_ORIGINS = [
    "https://talktoweb.com",
    "https://panel.talktoweb.com",
    "https://frontend.talktoweb.com",
    "http://167.99.244.71",
    "http://localhost:8000",
    "http://localhost:8001",
    "http://127.0.0.1:8000"
    "http://127.0.0.1:8001"
]
PHONE_NUMBER = os.getenv("PHONE_NUMBER")
LINKEDIN_ADDRESS = os.getenv("LINKEDIN_ADDRESS")
FACEBOOK_ADDRESS = os.getenv("FACEBOOK_ADDRESS")
INSTAGRAM_ADDRESS = os.getenv("INSTAGRAM_ADDRESS")
YOUTUBE_ADDRESS = os.getenv("YOUTUBE_ADDRESS")
TIKTOK_ADDRESS = os.getenv("TIKTOK_ADDRESS")
WHATSAPP_NUMBER = os.getenv("WHATSAPP_NUMBER")

ROOT = os.getenv("ROOT")
WS_ROOT = os.getenv("WS_ROOT")
API_ROOT = os.getenv("API_ROOT")
CDN_ENDPOINT = os.getenv("CDN_ENDPOINT")

GOOGLE_RECAPTCHA_SITE_KEY = os.getenv("GOOGLE_RECAPTCHA_SITE_KEY")
GOOGLE_RECAPTCHA_SECRET_KEY = os.getenv("GOOGLE_RECAPTCHA_SECRET_KEY")
ENCRYPT_KEY = os.getenv("ENCRYPT_KEY")
GOOGLE_RECAPTCHA_SITE_VERIFY_URL = os.getenv("GOOGLE_RECAPTCHA_SITE_VERIFY_URL")
GOOGLE_RECAPTCHA_V3_SECRET_KEY = os.getenv("GOOGLE_RECAPTCHA_V3_SECRET_KEY")
GOOGLE_RECAPTCHA_V3_SCORE = os.getenv("GOOGLE_RECAPTCHA_V3_SCORE")

FORCE_SCRIPT_NAME = '/'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.gzip.GZipMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.global_settings',
            ],
            'libraries': {
                'core_extras': 'frontend.templatetags.frontend_extras',

            },
        },
    },
]

ASGI_THREADS = 1000
WSGI_APPLICATION = 'core.wsgi.application'
ASGI_APPLICATION = "core.asgi.application"

DJANGORESIZED_DEFAULT_SIZE = [1920, 1080]
DJANGORESIZED_DEFAULT_QUALITY = 90
DJANGORESIZED_DEFAULT_KEEP_META = True
DJANGORESIZED_DEFAULT_FORCE_FORMAT = 'JPEG'
DJANGORESIZED_DEFAULT_FORMAT_EXTENSIONS = {'JPEG': ".jpg"}
DJANGORESIZED_DEFAULT_NORMALIZE_ROTATION = True

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": "ttw.db",
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
AUTHENTICATION_BACKENDS = ('django.contrib.auth.backends.ModelBackend',)
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

LANGUAGE_COOKIE_NAME = "langcode"
LANGUAGE_COOKIE_AGE = 180 * 86400
LANGUAGE_COOKIE_SAMESITE = "Lax"

USE_I18N = True
USE_L10N = True
USE_TZ = True
LANGUAGE_CODE = 'tr-TR'
LC_ALL = "tr_TR"
TIME_ZONE = 'Europe/Istanbul'
LANGUAGES = [
    ('tr', _('Turkish')),
    ('en', _('English')),
]

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = os.getenv("STATIC_URL")

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = os.getenv("MEDIA_URL")

X_FRAME_OPTIONS = "SAMEORIGIN"

LOGIN_REDIRECT_URL = reverse_lazy('frontend_admin')
LOGIN_URL = reverse_lazy('frontend_login')
LOGOUT_REDIRECT_URL = reverse_lazy('frontend_logout')

customColorPalette = [
    {
        'color': 'hsl(4, 90%, 58%)',
        'label': 'Red'
    },
    {
        'color': 'hsl(340, 82%, 52%)',
        'label': 'Pink'
    },
    {
        'color': 'hsl(291, 64%, 42%)',
        'label': 'Purple'
    },
    {
        'color': 'hsl(262, 52%, 47%)',
        'label': 'Deep Purple'
    },
    {
        'color': 'hsl(231, 48%, 48%)',
        'label': 'Indigo'
    },
    {
        'color': 'hsl(207, 90%, 54%)',
        'label': 'Blue'
    },
]

# CKEDITOR_5_CUSTOM_CSS = 'path_to.css'  # optional
CKEDITOR_5_FILE_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
CKEDITOR_5_CONFIGS = {
    'default': {
        'toolbar': ['heading', '|', 'bold', 'italic', 'link',
                    'bulletedList', 'numberedList', 'blockQuote', 'imageUpload', ],

    },
    'extends': {
        'blockToolbar': [
            'paragraph', 'heading1', 'heading2', 'heading3',
            '|',
            'bulletedList', 'numberedList',
            '|',
            'blockQuote',
        ],
        'toolbar': ['heading', '|', 'outdent', 'indent', '|', 'bold', 'italic', 'link', 'underline', 'strikethrough',
                    'code', 'subscript', 'superscript', 'highlight', '|', 'codeBlock', 'sourceEditing', 'insertImage',
                    'bulletedList', 'numberedList', 'todoList', '|', 'blockQuote', 'imageUpload', '|',
                    'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', 'mediaEmbed', 'removeFormat',
                    'insertTable', ],
        'image': {
            'toolbar': ['imageTextAlternative', '|', 'imageStyle:alignLeft',
                        'imageStyle:alignRight', 'imageStyle:alignCenter', 'imageStyle:side', '|'],
            'styles': [
                'full',
                'side',
                'alignLeft',
                'alignRight',
                'alignCenter',
            ]

        },
        'table': {
            'contentToolbar': ['tableColumn', 'tableRow', 'mergeTableCells',
                               'tableProperties', 'tableCellProperties'],
            'tableProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            },
            'tableCellProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            }
        },
        'heading': {
            'options': [
                {'model': 'paragraph', 'title': 'Paragraph', 'class': 'ck-heading_paragraph'},
                {'model': 'heading1', 'view': 'h1', 'title': 'Heading 1', 'class': 'ck-heading_heading1'},
                {'model': 'heading2', 'view': 'h2', 'title': 'Heading 2', 'class': 'ck-heading_heading2'},
                {'model': 'heading3', 'view': 'h3', 'title': 'Heading 3', 'class': 'ck-heading_heading3'}
            ]
        }
    },
    'list': {
        'properties': {
            'styles': 'true',
            'startIndex': 'true',
            'reversed': 'true',
        }
    }
}
SITE_ID = 1

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
        },
    },
    'handlers': {
        'default': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/mylog.log',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'formatter': 'standard',
        },
        'request_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/django_request.log',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'formatter': 'standard',
        },
    },
    'loggers': {
        '': {
            'handlers': ['default'],
            'level': 'DEBUG',
            'propagate': True
        },
        'django.request': {
            'handlers': ['request_handler'],
            'level': 'DEBUG',
            'propagate': False
        },
    }
}
